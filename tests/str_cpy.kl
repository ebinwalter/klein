fun strcpy(char *dest, char *src) {
  int ix = 0;
  while src[ix] != '\0' {
    dest[ix] = src[ix];
    ix = ix + 1;
  }
  dest[ix] = '\0';
}

// Requires char literals to compile
fun strncpy(char *dest, char *src, int n) {
  int ix = 0;
  while src[ix] != '\0' {
    if ix < n - 1 {
      dest[ix] = src[ix];
    }
    ix = ix + 1;
  }
  dest[ix] = '\0';
}

fun strlen(char *s) -> int {
  int i = 0;
  while s[i] != '\0' {
    i = i + 1;
  }
  return i;
}

// assumes head has enough space to accommodate tail
fun strcat(char *head, char *tail) {
  int len = strlen(head);
  int i = 0;
  while tail[i] != '\0' {
    head[len+i] = tail[i];
    i = i + 1;
  }
  head[len+i] = '\0';
}

char[20] snup_buf;
char[20] usual_buf;

fun main() {
  char *snupis = &snup_buf[0];
  char *usual = &usual_buf[0];
  out <- strlen("Hfeflflfo");
  out <- "\n";
  strcpy(snupis, "hello ");
  strcpy(usual, "user");
  strcat(snupis, usual);
  strcat(snupis, "\n");
  out <- snupis;
  out <- 5 + (3 + (5 + (7 + 1)));
}
