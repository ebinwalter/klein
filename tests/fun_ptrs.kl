fun sort(fun comparer(void *, void *) -> int, void *data, int item_size, int num_items);

fun proxy(fun int_fun(int, int) -> int, int x, int y) -> int {
  return int_fun(x, y);
}

fun add2(int x, int y) -> int {
  return x + y;
}

fun sub2(int x, int y) -> int {
  return x - y;
}

struct Freeable {
  void *item;
  fun free(void *);
}

fun free_freeable(struct Freeable *f) {
  fun freer(void *) = f.free;
  freer(f.item);
}

fun get_freer(struct Freeable *f) -> fun(void *) {
  return f.free;
}

fun free_noop(void *x) {
  out <- "free again to do as i please\n";
}

fun main() {
  struct Freeable f;
  f.item = 1;
  f.free = free_noop;

  free_freeable(&f);

  out <- proxy(add2, 5, 10);
  out <- proxy(sub2, 10, 5);
}
