fun strcpy(char *dest, char *src) {
  int ix = 0;
  while src[ix] != ""[0] {
    dest[ix] = src[ix];
    ix = ix + 1;
  }
  dest[ix] = ""[0];
}

// Requires char literals to compile
fun strncpy(char *dest, char *src, int n) {
  int ix = 0;
  while src[ix] != '\0' {
    if ix < n - 1 {
      dest[ix] = src[ix];
    }
    ix = ix + 1;
  }
  dest[ix] = '\0';
}

// Requires char comparisons to be able to compile
fun strcmp(char *s1, char *s2) -> int {
  int i = 0;
  while s1[i] != ""[0] {
    char a = s1[i];
    char b = s2[i];
    if b == ""[0] {
      return 1;
    }
    if s1[i] < s2[i] {
      return 0 - 1;
    } else {
      if s1[i] > s2[i] {
        return 1;
      }
    }
    i = i + 1;
  }
  if s2[i] != ""[0] {
    return 0 - 1;
  }
  return 0;
}

fun strlen(char *s) -> int {
  int i = 0;
  while s[i] != ""[0] {
    i = i + 1;
  }
  return i;
}

int cmp1;
int cmp2;

// assumes head has enough space to accommodate tail
fun strcat(char *head, char *tail) {
  int len = strlen(head);
  int i = 0;
  while tail[i] != ""[0] {
    head[len+i] = tail[i];
    i = i + 1;
  }
  head[len+i] = ""[0];
}

char[20] snup_buf;
char[20] usual_buf;

fun main() {
  char *snupis = &snup_buf[0];
  char *usual = &usual_buf[0];
  cmp1 = strlen("Hflonger");
  strcpy(snupis, "snoopingas");
  strcpy(usual, "usual icy");
  strcat(snupis, usual);
  strcat(snupis, "\n");
  out <- snupis;
}
